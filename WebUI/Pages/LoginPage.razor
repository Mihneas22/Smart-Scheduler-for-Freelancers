@page "/login"
@layout MainLayout

<div class="login-container">
    <div class="login-card card">
        <div class="card-body">
            <div class="text-center mb-6">
                <h1 class="text-2xl font-bold">@(IsLoginMode ? "Welcome Back" : "Create Account")</h1>
                <p class="text-medium">@(IsLoginMode ? "Sign in to your account" : "Sign up for BookingPro")</p>
            </div>

            <EditForm Model="@loginModel" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label class="form-label" for="email">Email Address</label>
                    <InputText id="email" class="form-input" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => loginModel.Email)" class="form-error" />
                </div>

                <div class="form-group">
                    <label class="form-label" for="password">Password</label>
                    <InputText id="password" type="password" class="form-input" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="form-error" />
                </div>

                @if (!IsLoginMode)
                {
                    <div class="form-group">
                        <label class="form-label" for="confirmPassword">Confirm Password</label>
                        <InputText id="confirmPassword" type="password" class="form-input" @bind-Value="loginModel.ConfirmPassword" placeholder="Confirm your password" />
                        <ValidationMessage For="@(() => loginModel.ConfirmPassword)" class="form-error" />
                    </div>
                }

                @if (IsLoginMode)
                {
                    <div class="form-group">
                        <div class="flex items-center">
                            <InputCheckbox id="remember" @bind-Value="loginModel.RememberMe" />
                            <label for="remember" class="form-label" style="margin-left: 8px; margin-bottom: 0;">Remember me</label>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="error-message">
                        @ErrorMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary w-full" disabled="@IsSubmitting">
                    @if (IsSubmitting)
                    {
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>@(IsLoginMode ? "Sign In" : "Create Account")</span>
                    }
                </button>
            </EditForm>

            <div class="text-center mt-4">
                <button class="btn btn-outline w-full" @onclick="ToggleMode">
                    @(IsLoginMode ? "Don't have an account? Sign up" : "Already have an account? Sign in")
                </button>
            </div>

            @if (IsLoginMode)
            {
                <div class="text-center mt-4">
                    <a href="#" class="text-primary-color">Forgot your password?</a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool IsLoginMode = true;
    private bool IsSubmitting = false;
    private string ErrorMessage = "";

    private void ToggleMode()
    {
        IsLoginMode = !IsLoginMode;
        ErrorMessage = "";
        loginModel = new LoginModel();
    }

    private async Task HandleSubmit()
    {
        IsSubmitting = true;
        ErrorMessage = "";

        try
        {
            // Simulate API call
            await Task.Delay(1000);

            if (IsLoginMode)
            {
                // Handle login logic
                // await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            }
            else
            {
                // Handle registration logic
                // await AuthService.RegisterAsync(loginModel.Email, loginModel.Password);
            }

            // Navigate to dashboard on success
            // Navigation.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";

        public string ConfirmPassword { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}