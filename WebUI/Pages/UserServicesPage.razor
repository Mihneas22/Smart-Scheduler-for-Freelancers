@page "/services/{name}"
@using Application.DTOs.User.Functions.GetUserData
@using Application.Services.User
@using Domain.Models
@using WebUI.State
@inject IUserService userService;

<div class="userServices-container">
    <div class="userServices-information">
        @if(UserData != null)
        {
            <h3>@UserData.Username</h3>
        }
    </div>

    <div class="stats-grid">
        @if(services.Count > 0)
        {
            foreach(var service in services)
            {
                <div class="stat-card">
                    <div class="stat-value">@service.Title</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@service.Description</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">$@service.Price</div>
                </div>
            }
        }
        else
        {
            <span>No services to display</span>
        }
    </div>
</div>

@code {
    [Parameter]
    public string name { get; set; } = string.Empty;

    private User? UserData { get; set; }

    private List<Service> services { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        var result = await userService.GetUserService(new GetUserDTO { UserName = name });

        if (result.Flag == true)
        {
            UserData = result.userData;
            if (UserData.Services != null)
                services = UserData.Services.Where(s => s.IsActive == true).ToList();
        }
    }
}
